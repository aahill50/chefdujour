datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    pantry        Pantry?
    cookbook      Cookbook?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Ingredient {
    id                 String              @id
    name               String
    image              String
    recipes            Recipe[]
    RecipeStep         RecipeStep?         @relation(fields: [recipeStepId], references: [id])
    recipeStepId       String?
    extendedIngredient ExtendedIngredient?
    pantry             Pantry[]
}

model ExtendedIngredient {
    id           String     @id
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
    ingredientId String     @unique
    recipe       Recipe     @relation(fields: [recipeId], references: [id])
    recipeId     String     @unique
    aisle        String
    name         String
    recipeName   String
    amountUS     String
    unitUS       String
    amountMetric String
    unitMetric   String
}

model Recipe {
    id                   String               @id
    title                String
    image                String
    sourceUrl            String
    cookingMinutes       Int
    preparationMinutes   Int
    servings             Int
    cuisines             String[]
    used_ingredients     Ingredient[]
    steps                RecipeStep[]
    extended_ingredients ExtendedIngredient[]
    cookbooks            Cookbook[]
}

model RecipeStep {
    id          String       @id @default(cuid())
    number      Int
    step        String
    ingredients Ingredient[]
    Recipe      Recipe?      @relation(fields: [recipeId], references: [id])
    recipeId    String?
}

model Pantry {
    id          String       @id @default(cuid())
    user        User         @relation(fields: [userId], references: [id])
    userId      String       @unique
    ingredients Ingredient[]
}

model Cookbook {
    id      String   @id @default(cuid())
    user    User     @relation(fields: [userId], references: [id])
    userId  String   @unique
    recipes Recipe[]
}
